{
  "contractName": "Pool3Gauge",
  "abi": [
    {
      "name": "Deposit",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Withdraw",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "UpdateLiquidityLimit",
      "inputs": [
        {
          "type": "address",
          "name": "user",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "original_balance",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "original_supply",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "working_balance",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "working_supply",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "lp_addr"
        },
        {
          "type": "address",
          "name": "_minter"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "name": "user_checkpoint",
      "outputs": [
        {
          "type": "bool",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 2069525
    },
    {
      "name": "claimable_tokens",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 1988796
    },
    {
      "name": "kick",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 2074623
    },
    {
      "name": "set_approve_deposit",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        },
        {
          "type": "bool",
          "name": "can_deposit"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 35801
    },
    {
      "name": "deposit",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "name": "deposit",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_value"
        },
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "name": "withdraw",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 2198611
    },
    {
      "name": "integrate_checkpoint",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 2207
    },
    {
      "name": "minter",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1331
    },
    {
      "name": "crv_token",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1361
    },
    {
      "name": "lp_token",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1391
    },
    {
      "name": "controller",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1421
    },
    {
      "name": "voting_escrow",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1451
    },
    {
      "name": "balanceOf",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1696
    },
    {
      "name": "totalSupply",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1511
    },
    {
      "name": "future_epoch_time",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1541
    },
    {
      "name": "approved_to_deposit",
      "outputs": [
        {
          "type": "bool",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        },
        {
          "type": "address",
          "name": "arg1"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 2001
    },
    {
      "name": "working_balances",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1816
    },
    {
      "name": "working_supply",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1631
    },
    {
      "name": "period",
      "outputs": [
        {
          "type": "int128",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1661
    },
    {
      "name": "period_timestamp",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1800
    },
    {
      "name": "integrate_inv_supply",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1830
    },
    {
      "name": "integrate_inv_supply_of",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1966
    },
    {
      "name": "integrate_checkpoint_of",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1996
    },
    {
      "name": "integrate_fraction",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 2026
    },
    {
      "name": "inflation_rate",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1841
    }
  ],
  "bytecode": "0x604061151761014039602061151760c03960c05160a01c1561002057600080fd5b602060206115170160c03960c05160a01c1561003b57600080fd5b6000610140511861004b57600080fd5b6000610160511861005b57600080fd5b61014051600255610160516000556020610200600463fc0c546a6101a0526101bc610160515afa61008b57600080fd5b601f3d1161009857600080fd5b6000506102005161018052610180516001556020610220600463f77c47916101c0526101dc610160515afa6100cc57600080fd5b601f3d116100d957600080fd5b600050610220516101a0526101a0516003556020610220600463dfe050316101c0526101dc6101a0515afa61010d57600080fd5b601f3d1161011a57600080fd5b6000506102205160045542600c60c052602060c0205560206102206004632c4e722e6101c0526101dc610180515afa61015257600080fd5b601f3d1161015f57600080fd5b600050610220516011556020610220600463b26b238e6101c0526101dc6000610180515af161018d57600080fd5b601f3d1161019a57600080fd5b600050610220516007556114ff56341561000a57600080fd5b600436101561001857611350565b600035601c52600015610285575b6101a0526101405261016052610180526004546101c052602061028060246370a0823161020052610140516102205261021c6101c0515afa61006757600080fd5b601f3d1161007457600080fd5b600050610280516101e052602061028060046318160ddd6102205261023c6101c0515afa6100a157600080fd5b601f3d116100ae57600080fd5b600050610280516102005261016051602880820282158284830414176100d357600080fd5b8090509050905060648082049050905061022052600061020051111561011f57600c60c052602060c020546212750081818301101561011157600080fd5b808201905090504211610122565b60005b156101a4576102208051610180516101e051808202821582848304141761014857600080fd5b8090509050905061020051808061015e57600080fd5b820490509050603c808202821582848304141761017a57600080fd5b8090509050905060648082049050905081818301101561019957600080fd5b808201905090508152505b6101605161022051808211156101ba57806101bc565b815b905090506102205260096101405160e05260c052604060c02054610240526102205160096101405160e05260c052604060c02055600a546102205181818301101561020657600080fd5b80820190509050610240518082101561021e57600080fd5b808203905090506102605261026051600a556101405161028052610160516102a052610180516102c052610220516102e05261026051610300527f7ecd84343f76a23d2227290e0288da3251b045541698e575a5515af4f04197a360a0610280a16101a051565b60001561087c575b6101605261014052600154610180526003546101a052600b546101c0526101c0516c01431e0fae6d7217caa000000081106102c757600080fd5b600c60c052602060c02001546101e0526101c0516c01431e0fae6d7217caa000000081106102f457600080fd5b600d60c052602060c020015461020052601154610220526102205161024052600754610260526101e051610260511015156103a65760206102e0600463b26b238e6102805261029c6000610180515af161034d57600080fd5b601f3d1161035a57600080fd5b6000506102e05160075560206102e06004632c4e722e6102805261029c610180515afa61038657600080fd5b601f3d1161039357600080fd5b6000506102e05161024052610240516011555b6101a0513b6103b457600080fd5b60006000602463615e523761028052306102a05261029c60006101a0515af16103dc57600080fd5b60096101405160e05260c052604060c0205461028052600a546102a0526101e05142111561073d576101e0516102c0526101e05162093a8081818301101561042357600080fd5b8082019050905062093a808082049050905062093a80808202821582848304141761044d57600080fd5b8090509050905042808211156104635780610465565b815b905090506102e05261030060006101f4818352015b6102e0516102c0518082101561048f57600080fd5b80820390509050610320526020610400604463d3078c946103605230610380526102c05162093a808082049050905062093a8080820282158284830414176104d657600080fd5b809050905090506103a05261037c6101a0515afa6104f357600080fd5b601f3d1161050057600080fd5b600050610400516103405260006102a05111156106da576102c05161026051101515610534576102e0516102605110610537565b60005b156106635761020080516102205161034051808202821582848304141761055d57600080fd5b80905090509050610260516102c0518082101561057957600080fd5b80820390509050808202821582848304141761059457600080fd5b809050905090506102a05180806105aa57600080fd5b8204905090508181830110156105bf57600080fd5b8082019050905081525061024051610220526102008051610220516103405180820282158284830414176105f257600080fd5b809050905090506102e051610260518082101561060e57600080fd5b80820390509050808202821582848304141761062957600080fd5b809050905090506102a051808061063f57600080fd5b82049050905081818301101561065457600080fd5b808201905090508152506106d9565b61020080516102205161034051808202821582848304141761068457600080fd5b809050905090506103205180820282158284830414176106a357600080fd5b809050905090506102a05180806106b957600080fd5b8204905090508181830110156106ce57600080fd5b808201905090508152505b5b426102e05114156106ea5761073a565b6102e0516102c0526102e05162093a8081818301101561070957600080fd5b80820190509050428082111561071f5780610721565b815b905090506102e0525b815160010180835281141561047a575b50505b6101c0805160018082018080600081121561075457195b607f1c1561076157600080fd5b9050905090508152506101c051600b55426101c0516c01431e0fae6d7217caa0000000811061078f57600080fd5b600c60c052602060c0200155610200516101c0516c01431e0fae6d7217caa000000081106107bc57600080fd5b600d60c052602060c020015560106101405160e05260c052604060c02080546102805161020051600e6101405160e05260c052604060c020548082101561080257600080fd5b80820390509050808202821582848304141761081d57600080fd5b80905090509050670de0b6b3a76400008082049050905081818301101561084357600080fd5b8082019050905081555061020051600e6101405160e05260c052604060c0205542600f6101405160e05260c052604060c0205561016051565b634b820093600051141561091a5760043560a01c1561089a57600080fd5b6004353314156108ab5760016108b1565b60005433145b5b6108bb57600080fd5b60043561014052610140516006580161028d565b60005060043561014052600560043560e05260c052604060c02054610160526006546101805261018051610160516101405160065801610026565b600050600160005260206000f350005b633313458360005114156109c05760043560a01c1561093857600080fd5b60043561014052610140516006580161028d565b600050601060043560e05260c052604060c0205460206101e06044638b752bb06101405260043561016052306101805261015c6000545afa61098d57600080fd5b601f3d1161099a57600080fd5b6000506101e051808210156109ae57600080fd5b8082039050905060005260206000f350005b6396c551756000511415610bc75760043560a01c156109de57600080fd5b60045461014052600f60043560e05260c052604060c020546101605260206102e0604463da020a1861024052600435610260526020610220602463010ae7576101a0526004356101c0526101bc610140515afa610a3a57600080fd5b601f3d11610a4757600080fd5b600050610220516102805261025c610140515afa610a6457600080fd5b601f3d11610a7157600080fd5b6000506102e05161018052600560043560e05260c052604060c020546101a05260206102e060246370a08231610260526004356102805261027c6004545afa610ab957600080fd5b601f3d11610ac657600080fd5b6000506102e0511515610ada576001610ae4565b6101605161018051115b5b610aee57600080fd5b6101a05160288082028215828483041417610b0857600080fd5b80905090509050606480820490509050600960043560e05260c052604060c0205411610b3357600080fd5b6101405161016051610180516101a0516004356101c0526101c0516006580161028d565b6101a0526101805261016052610140526000506101405161016051610180516101a0516004356101c052600560043560e05260c052604060c020546101e05260065461020052610200516101e0516101c05160065801610026565b6101a052610180526101605261014052600050005b631d2747d46000511415610c175760043560a01c15610be557600080fd5b60243560011c15610bf557600080fd5b602435600860043560e05260c052604060c0203360e05260c052604060c02055005b63b6b55f256000511415610c2f573361014052610c65565b636e553f656000511415610c5d5760243560a01c15610c4d57600080fd5b6020602461014037600050610c65565b600015610e9e575b62ffffff5415610c7457600080fd5b600162ffffff5533610140511815610cf05760083360e05260c052604060c0206101405160e05260c052604060c020541515610cef576308c379a061016052602061018052600c6101a0527f4e6f7420617070726f76656400000000000000000000000000000000000000006101c0526101a050606461017cfd5b5b610140516101405161016052610160516006580161028d565b6101405260005060006004351815610e635760056101405160e05260c052604060c02054600435818183011015610d3f57600080fd5b8082019050905061016052600654600435818183011015610d5f57600080fd5b80820190509050610180526101605160056101405160e05260c052604060c0205561018051600655610140516101605161018051610140516101a052610160516101c052610180516101e0526101e0516101c0516101a05160065801610026565b610180526101605261014052600050602061026060646323b872dd6101a052336101c052306101e052600435610200526101bc60006002545af1610e0357600080fd5b601f3d11610e1057600080fd5b600050610260511515610e62576308c379a06102805260206102a052600a6102c0527f4572726f722068657265000000000000000000000000000000000000000000006102e0526102c050606461029cfd5b5b60043561016052610140517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c6020610160a2600062ffffff55005b632e1a7d4d6000511415610ffa5762ffffff5415610ebb57600080fd5b600162ffffff553361014052610140516006580161028d565b60005060053360e05260c052604060c0205460043580821015610ef657600080fd5b808203905090506101405260065460043580821015610f1457600080fd5b80820390509050610160526101405160053360e05260c052604060c020556101605160065561014051610160513361018052610140516101a052610160516101c0526101c0516101a0516101805160065801610026565b61016052610140526000506020610220604463a9059cbb61018052336101a0526004356101c05261019c60006002545af1610fa557600080fd5b601f3d11610fb257600080fd5b60005061022051610fc257600080fd5b60043561018052337f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243646020610180a2600062ffffff55005b63d31f3f6d600051141561103b57600b546c01431e0fae6d7217caa0000000811061102457600080fd5b600c60c052602060c020015460005260206000f350005b630754617260005114156110575760005460005260206000f350005b6376d8b11760005114156110735760015460005260206000f350005b6382c63066600051141561108f5760025460005260206000f350005b63f77c479160005114156110ab5760035460005260206000f350005b63dfe0503160005114156110c75760045460005260206000f350005b6370a0823160005114156111015760043560a01c156110e557600080fd5b600560043560e05260c052604060c0205460005260206000f350005b6318160ddd600051141561111d5760065460005260206000f350005b63be5d1be960005114156111395760075460005260206000f350005b63e152253660005114156111915760043560a01c1561115757600080fd5b60243560a01c1561116757600080fd5b600860043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b6313ecb1ca60005114156111cb5760043560a01c156111af57600080fd5b600960043560e05260c052604060c0205460005260206000f350005b6317e2808960005114156111e757600a5460005260206000f350005b63ef78d4fd600051141561120357600b5460005260206000f350005b637598108c6000511415611244576004356c01431e0fae6d7217caa0000000811061122d57600080fd5b600c60c052602060c020015460005260206000f350005b63fec8ee0c6000511415611285576004356c01431e0fae6d7217caa0000000811061126e57600080fd5b600d60c052602060c020015460005260206000f350005b63de263bfa60005114156112bf5760043560a01c156112a357600080fd5b600e60043560e05260c052604060c0205460005260206000f350005b639bd324f260005114156112f95760043560a01c156112dd57600080fd5b600f60043560e05260c052604060c0205460005260206000f350005b630940070760005114156113335760043560a01c1561131757600080fd5b601060043560e05260c052604060c0205460005260206000f350005b63180692d0600051141561134f5760115460005260206000f350005b5b60006000fd5b6101a96114ff036101a96000396101a96114ff036000f3",
  "deployedBytecode": "",
  "source": "# @version 0.2.8\r\n\"\"\"\r\n@title Liquidity Gauge\r\n@author Curve Finance\r\n@license MIT\r\n@notice Used for measuring liquidity and insurance\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface CRV20:\r\n    def future_epoch_time_write() -> uint256: nonpayable\r\n    def rate() -> uint256: view\r\n\r\ninterface Controller:\r\n    def period() -> int128: view\r\n    def period_write() -> int128: nonpayable\r\n    def period_timestamp(p: int128) -> uint256: view\r\n    def gauge_relative_weight(addr: address, time: uint256) -> uint256: view\r\n    def voting_escrow() -> address: view\r\n    def checkpoint(): nonpayable\r\n    def checkpoint_gauge(addr: address): nonpayable\r\n\r\ninterface Minter:\r\n    def token() -> address: view\r\n    def controller() -> address: view\r\n    def minted(user: address, gauge: address) -> uint256: view\r\n\r\ninterface VotingEscrow:\r\n    def user_point_epoch(addr: address) -> uint256: view\r\n    def user_point_history__ts(addr: address, epoch: uint256) -> uint256: view\r\n\r\n\r\nevent Deposit:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent Withdraw:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent UpdateLiquidityLimit:\r\n    user: address\r\n    original_balance: uint256\r\n    original_supply: uint256\r\n    working_balance: uint256\r\n    working_supply: uint256\r\n\r\n\r\nTOKENLESS_PRODUCTION: constant(uint256) = 40\r\nBOOST_WARMUP: constant(uint256) = 2 * 7 * 86400\r\nWEEK: constant(uint256) = 604800\r\n\r\nminter: public(address)\r\ncrv_token: public(address)\r\nlp_token: public(address)\r\ncontroller: public(address)\r\nvoting_escrow: public(address)\r\nbalanceOf: public(HashMap[address, uint256])\r\ntotalSupply: public(uint256)\r\nfuture_epoch_time: public(uint256)\r\n\r\n# caller -> recipient -> can deposit?\r\napproved_to_deposit: public(HashMap[address, HashMap[address, bool]])\r\n\r\nworking_balances: public(HashMap[address, uint256])\r\nworking_supply: public(uint256)\r\n\r\n# The goal is to be able to calculate ∫(rate * balance / totalSupply dt) from 0 till checkpoint\r\n# All values are kept in units of being multiplied by 1e18\r\nperiod: public(int128)\r\nperiod_timestamp: public(uint256[100000000000000000000000000000])\r\n\r\n# 1e18 * ∫(rate(t) / totalSupply(t) dt) from 0 till checkpoint\r\nintegrate_inv_supply: public(uint256[100000000000000000000000000000])  # bump epoch when rate() changes\r\n\r\n# 1e18 * ∫(rate(t) / totalSupply(t) dt) from (last_action) till checkpoint\r\nintegrate_inv_supply_of: public(HashMap[address, uint256])\r\nintegrate_checkpoint_of: public(HashMap[address, uint256])\r\n\r\n\r\n# ∫(balance * rate(t) / totalSupply(t) dt) from 0 till checkpoint\r\n# Units: rate * t = already number of coins per address to issue\r\nintegrate_fraction: public(HashMap[address, uint256])\r\n\r\ninflation_rate: public(uint256)\r\n\r\n\r\n@external\r\ndef __init__(lp_addr: address, _minter: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param lp_addr Liquidity Pool contract address\r\n    @param _minter Minter contract address\r\n    \"\"\"\r\n\r\n    assert lp_addr != ZERO_ADDRESS\r\n    assert _minter != ZERO_ADDRESS\r\n\r\n    self.lp_token = lp_addr\r\n    self.minter = _minter\r\n    crv_addr: address = Minter(_minter).token()\r\n    self.crv_token = crv_addr\r\n    controller_addr: address = Minter(_minter).controller()\r\n    self.controller = controller_addr\r\n    self.voting_escrow = Controller(controller_addr).voting_escrow()\r\n    self.period_timestamp[0] = block.timestamp\r\n    self.inflation_rate = CRV20(crv_addr).rate()\r\n    self.future_epoch_time = CRV20(crv_addr).future_epoch_time_write()\r\n\r\n\r\n@internal\r\ndef _update_liquidity_limit(addr: address, l: uint256, L: uint256):\r\n    \"\"\"\r\n    @notice Calculate limits which depend on the amount of CRV token per-user.\r\n            Effectively it calculates working balances to apply amplification\r\n            of CRV production by CRV\r\n    @param addr User address\r\n    @param l User's amount of liquidity (LP tokens)\r\n    @param L Total amount of liquidity (LP tokens)\r\n    \"\"\"\r\n    # To be called after totalSupply is updated\r\n    _voting_escrow: address = self.voting_escrow\r\n    voting_balance: uint256 = ERC20(_voting_escrow).balanceOf(addr)\r\n    voting_total: uint256 = ERC20(_voting_escrow).totalSupply()\r\n\r\n    lim: uint256 = l * TOKENLESS_PRODUCTION / 100\r\n    if (voting_total > 0) and (block.timestamp > self.period_timestamp[0] + BOOST_WARMUP):\r\n        lim += L * voting_balance / voting_total * (100 - TOKENLESS_PRODUCTION) / 100\r\n\r\n    lim = min(l, lim)\r\n    old_bal: uint256 = self.working_balances[addr]\r\n    self.working_balances[addr] = lim\r\n    _working_supply: uint256 = self.working_supply + lim - old_bal\r\n    self.working_supply = _working_supply\r\n\r\n    log UpdateLiquidityLimit(addr, l, L, lim, _working_supply)\r\n\r\n\r\n@internal\r\ndef _checkpoint(addr: address):\r\n    \"\"\"\r\n    @notice Checkpoint for a user\r\n    @param addr User address\r\n    \"\"\"\r\n    _token: address = self.crv_token\r\n    _controller: address = self.controller\r\n    _period: int128 = self.period\r\n    _period_time: uint256 = self.period_timestamp[_period]\r\n    _integrate_inv_supply: uint256 = self.integrate_inv_supply[_period]\r\n    rate: uint256 = self.inflation_rate\r\n    new_rate: uint256 = rate\r\n    prev_future_epoch: uint256 = self.future_epoch_time\r\n    if prev_future_epoch >= _period_time:\r\n        self.future_epoch_time = CRV20(_token).future_epoch_time_write()\r\n        new_rate = CRV20(_token).rate()\r\n        self.inflation_rate = new_rate\r\n    Controller(_controller).checkpoint_gauge(self)\r\n\r\n    _working_balance: uint256 = self.working_balances[addr]\r\n    _working_supply: uint256 = self.working_supply\r\n\r\n    # Update integral of 1/supply\r\n    if block.timestamp > _period_time:\r\n        prev_week_time: uint256 = _period_time\r\n        week_time: uint256 = min((_period_time + WEEK) / WEEK * WEEK, block.timestamp)\r\n\r\n        for i in range(500):\r\n            dt: uint256 = week_time - prev_week_time\r\n            w: uint256 = Controller(_controller).gauge_relative_weight(self, prev_week_time / WEEK * WEEK)\r\n\r\n            if _working_supply > 0:\r\n                if prev_future_epoch >= prev_week_time and prev_future_epoch < week_time:\r\n                    # If we went across one or multiple epochs, apply the rate\r\n                    # of the first epoch until it ends, and then the rate of\r\n                    # the last epoch.\r\n                    # If more than one epoch is crossed - the gauge gets less,\r\n                    # but that'd meen it wasn't called for more than 1 year\r\n                    _integrate_inv_supply += rate * w * (prev_future_epoch - prev_week_time) / _working_supply\r\n                    rate = new_rate\r\n                    _integrate_inv_supply += rate * w * (week_time - prev_future_epoch) / _working_supply\r\n                else:\r\n                    _integrate_inv_supply += rate * w * dt / _working_supply\r\n                # On precisions of the calculation\r\n                # rate ~= 10e18\r\n                # last_weight > 0.01 * 1e18 = 1e16 (if pool weight is 1%)\r\n                # _working_supply ~= TVL * 1e18 ~= 1e26 ($100M for example)\r\n                # The largest loss is at dt = 1\r\n                # Loss is 1e-9 - acceptable\r\n\r\n            if week_time == block.timestamp:\r\n                break\r\n            prev_week_time = week_time\r\n            week_time = min(week_time + WEEK, block.timestamp)\r\n\r\n    _period += 1\r\n    self.period = _period\r\n    self.period_timestamp[_period] = block.timestamp\r\n    self.integrate_inv_supply[_period] = _integrate_inv_supply\r\n\r\n    # Update user-specific integrals\r\n    self.integrate_fraction[addr] += _working_balance * (_integrate_inv_supply - self.integrate_inv_supply_of[addr]) / 10 ** 18\r\n    self.integrate_inv_supply_of[addr] = _integrate_inv_supply\r\n    self.integrate_checkpoint_of[addr] = block.timestamp\r\n\r\n\r\n@external\r\ndef user_checkpoint(addr: address) -> bool:\r\n    \"\"\"\r\n    @notice Record a checkpoint for `addr`\r\n    @param addr User address\r\n    @return bool success\r\n    \"\"\"\r\n    assert (msg.sender == addr) or (msg.sender == self.minter)  # dev: unauthorized\r\n    self._checkpoint(addr)\r\n    self._update_liquidity_limit(addr, self.balanceOf[addr], self.totalSupply)\r\n    return True\r\n\r\n\r\n@external\r\ndef claimable_tokens(addr: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of claimable tokens per user\r\n    @dev This function should be manually changed to \"view\" in the ABI\r\n    @return uint256 number of claimable tokens per user\r\n    \"\"\"\r\n    self._checkpoint(addr)\r\n    return self.integrate_fraction[addr] - Minter(self.minter).minted(addr, self)\r\n\r\n\r\n@external\r\ndef kick(addr: address):\r\n    \"\"\"\r\n    @notice Kick `addr` for abusing their boost\r\n    @dev Only if either they had another voting event, or their voting escrow lock expired\r\n    @param addr Address to kick\r\n    \"\"\"\r\n    _voting_escrow: address = self.voting_escrow\r\n    t_last: uint256 = self.integrate_checkpoint_of[addr]\r\n    t_ve: uint256 = VotingEscrow(_voting_escrow).user_point_history__ts(\r\n        addr, VotingEscrow(_voting_escrow).user_point_epoch(addr)\r\n    )\r\n    _balance: uint256 = self.balanceOf[addr]\r\n\r\n    assert ERC20(self.voting_escrow).balanceOf(addr) == 0 or t_ve > t_last # dev: kick not allowed\r\n    assert self.working_balances[addr] > _balance * TOKENLESS_PRODUCTION / 100  # dev: kick not needed\r\n\r\n    self._checkpoint(addr)\r\n    self._update_liquidity_limit(addr, self.balanceOf[addr], self.totalSupply)\r\n\r\n\r\n@external\r\ndef set_approve_deposit(addr: address, can_deposit: bool):\r\n    \"\"\"\r\n    @notice Set whether `addr` can deposit tokens for `msg.sender`\r\n    @param addr Address to set approval on\r\n    @param can_deposit bool - can this account deposit for `msg.sender`?\r\n    \"\"\"\r\n    self.approved_to_deposit[addr][msg.sender] = can_deposit\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef deposit(_value: uint256, addr: address = msg.sender):\r\n    \"\"\"\r\n    @notice Deposit `_value` LP tokens\r\n    @param _value Number of tokens to deposit\r\n    @param addr Address to deposit for\r\n    \"\"\"\r\n    if addr != msg.sender:\r\n        assert self.approved_to_deposit[msg.sender][addr], \"Not approved\"\r\n\r\n    self._checkpoint(addr)\r\n\r\n    if _value != 0:\r\n        _balance: uint256 = self.balanceOf[addr] + _value\r\n        _supply: uint256 = self.totalSupply + _value\r\n        self.balanceOf[addr] = _balance\r\n        self.totalSupply = _supply\r\n\r\n        self._update_liquidity_limit(addr, _balance, _supply)\r\n\r\n        assert ERC20(self.lp_token).transferFrom(msg.sender, self, _value), \"Error here\"\r\n\r\n    log Deposit(addr, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw(_value: uint256):\r\n    \"\"\"\r\n    @notice Withdraw `_value` LP tokens\r\n    @param _value Number of tokens to withdraw\r\n    \"\"\"\r\n    self._checkpoint(msg.sender)\r\n\r\n    _balance: uint256 = self.balanceOf[msg.sender] - _value\r\n    _supply: uint256 = self.totalSupply - _value\r\n    self.balanceOf[msg.sender] = _balance\r\n    self.totalSupply = _supply\r\n\r\n    self._update_liquidity_limit(msg.sender, _balance, _supply)\r\n\r\n    assert ERC20(self.lp_token).transfer(msg.sender, _value)\r\n\r\n    log Withdraw(msg.sender, _value)\r\n\r\n\r\n@external\r\n@view\r\ndef integrate_checkpoint() -> uint256:\r\n    return self.period_timestamp[self.period]",
  "sourcePath": "C:/Users/vishn/OneDrive/Desktop/TempRoyakle/rlp/contracts/curve/Pool3Gauge.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.2.8+commit.069936f"
  },
  "networks": {},
  "schemaVersion": "3.3.2",
  "updatedAt": "2020-12-31T12:47:34.650Z"
}