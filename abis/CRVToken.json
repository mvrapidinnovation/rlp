{
  "contractName": "CRVToken",
  "abi": [
    {
      "name": "Transfer",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_to",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Approval",
      "inputs": [
        {
          "type": "address",
          "name": "_owner",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_spender",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "UpdateMiningParameters",
      "inputs": [
        {
          "type": "uint256",
          "name": "time",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "rate",
          "indexed": false
        },
        {
          "type": "uint256",
          "name": "supply",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "SetMinter",
      "inputs": [
        {
          "type": "address",
          "name": "minter",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "SetAdmin",
      "inputs": [
        {
          "type": "address",
          "name": "admin",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "outputs": [],
      "inputs": [
        {
          "type": "string",
          "name": "_name"
        },
        {
          "type": "string",
          "name": "_symbol"
        },
        {
          "type": "uint256",
          "name": "_decimals"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "name": "update_mining_parameters",
      "outputs": [],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 148730
    },
    {
      "name": "start_epoch_time_write",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 149582
    },
    {
      "name": "future_epoch_time_write",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 149785
    },
    {
      "name": "available_supply",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 3928
    },
    {
      "name": "mintable_in_timeframe",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "start"
        },
        {
          "type": "uint256",
          "name": "end"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 2197051
    },
    {
      "name": "set_minter",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_minter"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 38669
    },
    {
      "name": "set_admin",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_admin"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 37808
    },
    {
      "name": "totalSupply",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1331
    },
    {
      "name": "allowance",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_owner"
        },
        {
          "type": "address",
          "name": "_spender"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1791
    },
    {
      "name": "transfer",
      "outputs": [
        {
          "type": "bool",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 75110
    },
    {
      "name": "transferFrom",
      "outputs": [
        {
          "type": "bool",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 111465
    },
    {
      "name": "approve",
      "outputs": [
        {
          "type": "bool",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_spender"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 39259
    },
    {
      "name": "mint",
      "outputs": [
        {
          "type": "bool",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 228067
    },
    {
      "name": "burn",
      "outputs": [
        {
          "type": "bool",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 74909
    },
    {
      "name": "set_name",
      "outputs": [],
      "inputs": [
        {
          "type": "string",
          "name": "_name"
        },
        {
          "type": "string",
          "name": "_symbol"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 178147
    },
    {
      "name": "name",
      "outputs": [
        {
          "type": "string",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 7973
    },
    {
      "name": "symbol",
      "outputs": [
        {
          "type": "string",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 7026
    },
    {
      "name": "decimals",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1631
    },
    {
      "name": "balanceOf",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 1876
    },
    {
      "name": "minter",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1691
    },
    {
      "name": "admin",
      "outputs": [
        {
          "type": "address",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1721
    },
    {
      "name": "mining_epoch",
      "outputs": [
        {
          "type": "int128",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1751
    },
    {
      "name": "start_epoch_time",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1781
    },
    {
      "name": "rate",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1811
    }
  ],
  "bytecode": "0x606061118b610140396060602061118b60c03960c05161118b016101a0396040602061118b60c03960c05160040135111561003957600080fd5b60406020602061118b0160c03960c05161118b016102203960206020602061118b0160c03960c05160040135111561007057600080fd5b634daaaa1f604e610180511061008557600080fd5b61018051600a0a80820282158284830414176100a057600080fd5b80905090509050610280526101a080600060c052602060c020602082510161012060006003818352015b826101205160200211156100dd576100ff565b61012051602002850151610120518501555b81516001018083528114156100ca575b50505050505061022080600160c052602060c020602082510161012060006002818352015b8261012051602002111561013757610159565b61012051602002850151610120518501555b8151600101808352811415610124575b505050505050610180516002556102805160033360e05260c052604060c020556102805160055533600755610280516102a0523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206102a0a342620151808181830110156101ca57600080fd5b808201905090506301e13380808210156101e357600080fd5b808203905090506009557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6008556000600a5561028051600b5561117356341561000a57600080fd5b600436101561001857610f4b565b600035601c52600015610171575b61014052600a5461016052600b5461018052600980546301e1338081818301101561005057600080fd5b808201905090508155506008805460018082018080600081121561007057195b607f1c1561007d57600080fd5b9050905090508155506101605115156100a2576778ef89edad16a61561016052610128565b6101808051610160516301e1338080820282158284830414176100c457600080fd5b809050905090508181830110156100da57600080fd5b8082019050905081525061018051600b5561016051670de0b6b3a7640000808202821582848304141761010c57600080fd5b80905090509050671080e992061ab30080820490509050610160525b61016051600a55426101a052610160516101c052610180516101e0527f27e46362a1e6129b6dd539c984ce739291a97128dfcaeca1255e8ac83abd944160606101a0a161014051565b63d43b40fa60005114156101b7576009546301e1338081818301101561019657600080fd5b808201905090504210156101a957600080fd5b60065801610026565b600050005b63adc4cf4360005114156102285760095461014052610140516301e133808181830110156101e457600080fd5b8082019050905042101515610218576101405160065801610026565b6101405260005060095460005260206000f350610226565b6101405160005260206000f3505b005b63b26b238e60005114156102cf5760095461014052610140516301e1338081818301101561025557600080fd5b80820190509050421015156102a4576101405160065801610026565b610140526000506009546301e1338081818301101561028f57600080fd5b8082019050905060005260206000f3506102cd565b610140516301e133808181830110156102bc57600080fd5b8082019050905060005260206000f3505b005b600015610338575b61014052600b5442600954808210156102ef57600080fd5b80820390509050600a54808202821582848304141761030d57600080fd5b8090509050905081818301101561032357600080fd5b80820190509050600052600051610140515650005b6324f92a25600051141561036257600658016102d7565b610140526101405160005260206000f350005b63d725a9ca600051141561060f57602435600435111561038157600080fd5b60006101405260095461016052600a5461018052610160516301e133808181830110156103ad57600080fd5b80820190509050602435111561041d5761016080516301e133808181830110156103d657600080fd5b8082019050905081525061018051670de0b6b3a7640000808202821582848304141761040157600080fd5b80905090509050671080e992061ab30080820490509050610180525b610160516301e1338081818301101561043557600080fd5b80820190509050602435111561044a57600080fd5b6101a060006103e7818352015b61016051602435101515610578576024356101c052610160516301e1338081818301101561048457600080fd5b808201905090506101c05111156104b957610160516301e133808181830110156104ad57600080fd5b808201905090506101c0525b6004356101e052610160516301e133808181830110156104d857600080fd5b808201905090506101e0511015156104f3576105fe5661050b565b610160516101e051101561050a57610160516101e0525b5b6101408051610180516101c0516101e0518082101561052957600080fd5b80820390509050808202821582848304141761054457600080fd5b8090509050905081818301101561055a57600080fd5b8082019050905081525061016051600435101515610577576105fe565b5b61016080516301e133808082101561058f57600080fd5b8082039050905081525061018051671080e992061ab30080820282158284830414176105ba57600080fd5b80905090509050670de0b6b3a764000080820490509050610180526778ef89edad16a6156101805111156105ed57600080fd5b5b8151600101808352811415610457575b50506101405160005260206000f350005b631652e9fc600051141561067e5760043560a01c1561062d57600080fd5b600754331461063b57600080fd5b6006541561064857600080fd5b600435600655600435610140527fcec52196e972044edde8689a1b608e459c5946b7f3e5c8cd3d6d8e126d422e1c6020610140a1005b63e9333fab60005114156106e05760043560a01c1561069c57600080fd5b60075433146106aa57600080fd5b600435600755600435610140527f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a16020610140a1005b6318160ddd60005114156106fc5760055460005260206000f350005b63dd62ed3e60005114156107545760043560a01c1561071a57600080fd5b60243560a01c1561072a57600080fd5b600460043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a9059cbb60005114156108185760043560a01c1561077257600080fd5b60006004351861078157600080fd5b60033360e05260c052604060c0208054602435808210156107a157600080fd5b80820390509050815550600360043560e05260c052604060c02080546024358181830110156107cf57600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd60005114156109285760043560a01c1561083657600080fd5b60243560a01c1561084657600080fd5b60006024351861085557600080fd5b600360043560e05260c052604060c02080546044358082101561087757600080fd5b80820390509050815550600360243560e05260c052604060c02080546044358181830110156108a557600080fd5b80820190509050815550600460043560e05260c052604060c0203360e05260c052604060c0208054604435808210156108dd57600080fd5b80820390509050815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b360005114156109de5760043560a01c1561094657600080fd5b6024351515610956576001610975565b60043360e05260c052604060c02060043560e05260c052604060c02054155b5b61097f57600080fd5b60243560043360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b6340c10f196000511415610b095760043560a01c156109fc57600080fd5b6006543314610a0a57600080fd5b600060043518610a1957600080fd5b6009546301e13380818183011015610a3057600080fd5b8082019050905042101515610a4c5760065801610026565b6000505b600554602435818183011015610a6157600080fd5b808201905090506101405261014051600658016102d7565b610160526101405261016051610140511115610a9457600080fd5b61014051600555600360043560e05260c052604060c0208054602435818183011015610abf57600080fd5b808201905090508155506024356101605260043560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610160a3600160005260206000f350005b6342966c686000511415610b9d5760033360e05260c052604060c020805460043580821015610b3757600080fd5b808203905090508155506005805460043580821015610b5557600080fd5b80820390509050815550600435610140526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63e1430e066000511415610d16576060600435600401610140376040600435600401351115610bcb57600080fd5b60406024356004016101c0376020602435600401351115610beb57600080fd5b60075433141515610c60576308c379a0610220526020610240526024610260527f4f6e6c792061646d696e20697320616c6c6f77656420746f206368616e676520610280527f6e616d65000000000000000000000000000000000000000000000000000000006102a05261026050608461023cfd5b61014080600060c052602060c020602082510161012060006003818352015b82610120516020021115610c9257610cb4565b61012051602002850151610120518501555b8151600101808352811415610c7f575b5050505050506101c080600160c052602060c020602082510161012060006002818352015b82610120516020021115610cec57610d0e565b61012051602002850151610120518501555b8151600101808352811415610cd9575b505050505050005b6306fdde036000511415610dbf5760008060c052602060c020610180602082540161012060006003818352015b82610120516020021115610d5657610d78565b61012051850154610120516020028501525b8151600101808352811415610d43575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b416000511415610e685760018060c052602060c020610180602082540161012060006002818352015b82610120516020021115610dff57610e21565b61012051850154610120516020028501525b8151600101808352811415610dec575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce5676000511415610e845760025460005260206000f350005b6370a082316000511415610ebe5760043560a01c15610ea257600080fd5b600360043560e05260c052604060c0205460005260206000f350005b63075461726000511415610eda5760065460005260206000f350005b63f851a4406000511415610ef65760075460005260206000f350005b63f9a40bf66000511415610f125760085460005260206000f350005b637375be266000511415610f2e5760095460005260206000f350005b632c4e722e6000511415610f4a57600a5460005260206000f350005b5b60006000fd5b61022261117303610222600039610222611173036000f3",
  "deployedBytecode": "0x341561000a57600080fd5b600436101561001857610f4b565b600035601c52600015610171575b61014052600a5461016052600b5461018052600980546301e1338081818301101561005057600080fd5b808201905090508155506008805460018082018080600081121561007057195b607f1c1561007d57600080fd5b9050905090508155506101605115156100a2576778ef89edad16a61561016052610128565b6101808051610160516301e1338080820282158284830414176100c457600080fd5b809050905090508181830110156100da57600080fd5b8082019050905081525061018051600b5561016051670de0b6b3a7640000808202821582848304141761010c57600080fd5b80905090509050671080e992061ab30080820490509050610160525b61016051600a55426101a052610160516101c052610180516101e0527f27e46362a1e6129b6dd539c984ce739291a97128dfcaeca1255e8ac83abd944160606101a0a161014051565b63d43b40fa60005114156101b7576009546301e1338081818301101561019657600080fd5b808201905090504210156101a957600080fd5b60065801610026565b600050005b63adc4cf4360005114156102285760095461014052610140516301e133808181830110156101e457600080fd5b8082019050905042101515610218576101405160065801610026565b6101405260005060095460005260206000f350610226565b6101405160005260206000f3505b005b63b26b238e60005114156102cf5760095461014052610140516301e1338081818301101561025557600080fd5b80820190509050421015156102a4576101405160065801610026565b610140526000506009546301e1338081818301101561028f57600080fd5b8082019050905060005260206000f3506102cd565b610140516301e133808181830110156102bc57600080fd5b8082019050905060005260206000f3505b005b600015610338575b61014052600b5442600954808210156102ef57600080fd5b80820390509050600a54808202821582848304141761030d57600080fd5b8090509050905081818301101561032357600080fd5b80820190509050600052600051610140515650005b6324f92a25600051141561036257600658016102d7565b610140526101405160005260206000f350005b63d725a9ca600051141561060f57602435600435111561038157600080fd5b60006101405260095461016052600a5461018052610160516301e133808181830110156103ad57600080fd5b80820190509050602435111561041d5761016080516301e133808181830110156103d657600080fd5b8082019050905081525061018051670de0b6b3a7640000808202821582848304141761040157600080fd5b80905090509050671080e992061ab30080820490509050610180525b610160516301e1338081818301101561043557600080fd5b80820190509050602435111561044a57600080fd5b6101a060006103e7818352015b61016051602435101515610578576024356101c052610160516301e1338081818301101561048457600080fd5b808201905090506101c05111156104b957610160516301e133808181830110156104ad57600080fd5b808201905090506101c0525b6004356101e052610160516301e133808181830110156104d857600080fd5b808201905090506101e0511015156104f3576105fe5661050b565b610160516101e051101561050a57610160516101e0525b5b6101408051610180516101c0516101e0518082101561052957600080fd5b80820390509050808202821582848304141761054457600080fd5b8090509050905081818301101561055a57600080fd5b8082019050905081525061016051600435101515610577576105fe565b5b61016080516301e133808082101561058f57600080fd5b8082039050905081525061018051671080e992061ab30080820282158284830414176105ba57600080fd5b80905090509050670de0b6b3a764000080820490509050610180526778ef89edad16a6156101805111156105ed57600080fd5b5b8151600101808352811415610457575b50506101405160005260206000f350005b631652e9fc600051141561067e5760043560a01c1561062d57600080fd5b600754331461063b57600080fd5b6006541561064857600080fd5b600435600655600435610140527fcec52196e972044edde8689a1b608e459c5946b7f3e5c8cd3d6d8e126d422e1c6020610140a1005b63e9333fab60005114156106e05760043560a01c1561069c57600080fd5b60075433146106aa57600080fd5b600435600755600435610140527f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a16020610140a1005b6318160ddd60005114156106fc5760055460005260206000f350005b63dd62ed3e60005114156107545760043560a01c1561071a57600080fd5b60243560a01c1561072a57600080fd5b600460043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a9059cbb60005114156108185760043560a01c1561077257600080fd5b60006004351861078157600080fd5b60033360e05260c052604060c0208054602435808210156107a157600080fd5b80820390509050815550600360043560e05260c052604060c02080546024358181830110156107cf57600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd60005114156109285760043560a01c1561083657600080fd5b60243560a01c1561084657600080fd5b60006024351861085557600080fd5b600360043560e05260c052604060c02080546044358082101561087757600080fd5b80820390509050815550600360243560e05260c052604060c02080546044358181830110156108a557600080fd5b80820190509050815550600460043560e05260c052604060c0203360e05260c052604060c0208054604435808210156108dd57600080fd5b80820390509050815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b360005114156109de5760043560a01c1561094657600080fd5b6024351515610956576001610975565b60043360e05260c052604060c02060043560e05260c052604060c02054155b5b61097f57600080fd5b60243560043360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b6340c10f196000511415610b095760043560a01c156109fc57600080fd5b6006543314610a0a57600080fd5b600060043518610a1957600080fd5b6009546301e13380818183011015610a3057600080fd5b8082019050905042101515610a4c5760065801610026565b6000505b600554602435818183011015610a6157600080fd5b808201905090506101405261014051600658016102d7565b610160526101405261016051610140511115610a9457600080fd5b61014051600555600360043560e05260c052604060c0208054602435818183011015610abf57600080fd5b808201905090508155506024356101605260043560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610160a3600160005260206000f350005b6342966c686000511415610b9d5760033360e05260c052604060c020805460043580821015610b3757600080fd5b808203905090508155506005805460043580821015610b5557600080fd5b80820390509050815550600435610140526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63e1430e066000511415610d16576060600435600401610140376040600435600401351115610bcb57600080fd5b60406024356004016101c0376020602435600401351115610beb57600080fd5b60075433141515610c60576308c379a0610220526020610240526024610260527f4f6e6c792061646d696e20697320616c6c6f77656420746f206368616e676520610280527f6e616d65000000000000000000000000000000000000000000000000000000006102a05261026050608461023cfd5b61014080600060c052602060c020602082510161012060006003818352015b82610120516020021115610c9257610cb4565b61012051602002850151610120518501555b8151600101808352811415610c7f575b5050505050506101c080600160c052602060c020602082510161012060006002818352015b82610120516020021115610cec57610d0e565b61012051602002850151610120518501555b8151600101808352811415610cd9575b505050505050005b6306fdde036000511415610dbf5760008060c052602060c020610180602082540161012060006003818352015b82610120516020021115610d5657610d78565b61012051850154610120516020028501525b8151600101808352811415610d43575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b416000511415610e685760018060c052602060c020610180602082540161012060006002818352015b82610120516020021115610dff57610e21565b61012051850154610120516020028501525b8151600101808352811415610dec575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce5676000511415610e845760025460005260206000f350005b6370a082316000511415610ebe5760043560a01c15610ea257600080fd5b600360043560e05260c052604060c0205460005260206000f350005b63075461726000511415610eda5760065460005260206000f350005b63f851a4406000511415610ef65760075460005260206000f350005b63f9a40bf66000511415610f125760085460005260206000f350005b637375be266000511415610f2e5760095460005260206000f350005b632c4e722e6000511415610f4a57600a5460005260206000f350005b5b60006000fd",
  "source": "# @version 0.2.8\r\n\"\"\"\r\n@title Curve DAO Token\r\n@author Curve Finance\r\n@license MIT\r\n@notice ERC20 with piecewise-linear mining supply.\r\n@dev Based on the ERC-20 token standard as defined at\r\n     https://eips.ethereum.org/EIPS/eip-20\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\n\r\nevent Transfer:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _value: uint256\r\n\r\nevent Approval:\r\n    _owner: indexed(address)\r\n    _spender: indexed(address)\r\n    _value: uint256\r\n\r\nevent UpdateMiningParameters:\r\n    time: uint256\r\n    rate: uint256\r\n    supply: uint256\r\n\r\nevent SetMinter:\r\n    minter: address\r\n\r\nevent SetAdmin:\r\n    admin: address\r\n\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\ndecimals: public(uint256)\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowances: HashMap[address, HashMap[address, uint256]]\r\ntotal_supply: uint256\r\n\r\nminter: public(address)\r\nadmin: public(address)\r\n\r\n# General constants\r\nYEAR: constant(uint256) = 86400 * 365\r\n\r\n# Allocation:\r\n# =========\r\n# * shareholders - 30%\r\n# * emplyees - 3%\r\n# * DAO-controlled reserve - 5%\r\n# * Early users - 5%\r\n# == 43% ==\r\n# left for inflation: 57%\r\n\r\n# Supply parameters\r\nINITIAL_SUPPLY: constant(uint256) = 1_303_030_303\r\nINITIAL_RATE: constant(uint256) = 274_815_283 * 10 ** 18 / YEAR  # leading to 43% premine\r\nRATE_REDUCTION_TIME: constant(uint256) = YEAR\r\nRATE_REDUCTION_COEFFICIENT: constant(uint256) = 1189207115002721024  # 2 ** (1/4) * 1e18\r\nRATE_DENOMINATOR: constant(uint256) = 10 ** 18\r\nINFLATION_DELAY: constant(uint256) = 86400\r\n\r\n# Supply variables\r\nmining_epoch: public(int128)\r\nstart_epoch_time: public(uint256)\r\nrate: public(uint256)\r\n\r\nstart_epoch_supply: uint256\r\n\r\n\r\n@external\r\ndef __init__(_name: String[64], _symbol: String[32], _decimals: uint256):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _name Token full name\r\n    @param _symbol Token symbol\r\n    @param _decimals Number of decimals for token\r\n    \"\"\"\r\n    init_supply: uint256 = INITIAL_SUPPLY * 10 ** _decimals\r\n    self.name = _name\r\n    self.symbol = _symbol\r\n    self.decimals = _decimals\r\n    self.balanceOf[msg.sender] = init_supply\r\n    self.total_supply = init_supply\r\n    self.admin = msg.sender\r\n    log Transfer(ZERO_ADDRESS, msg.sender, init_supply)\r\n\r\n    self.start_epoch_time = block.timestamp + INFLATION_DELAY - RATE_REDUCTION_TIME\r\n    self.mining_epoch = -1\r\n    self.rate = 0\r\n    self.start_epoch_supply = init_supply\r\n\r\n\r\n@internal\r\ndef _update_mining_parameters():\r\n    \"\"\"\r\n    @dev Update mining rate and supply at the start of the epoch\r\n         Any modifying mining call must also call this\r\n    \"\"\"\r\n    _rate: uint256 = self.rate\r\n    _start_epoch_supply: uint256 = self.start_epoch_supply\r\n\r\n    self.start_epoch_time += RATE_REDUCTION_TIME\r\n    self.mining_epoch += 1\r\n\r\n    if _rate == 0:\r\n        _rate = INITIAL_RATE\r\n    else:\r\n        _start_epoch_supply += _rate * RATE_REDUCTION_TIME\r\n        self.start_epoch_supply = _start_epoch_supply\r\n        _rate = _rate * RATE_DENOMINATOR / RATE_REDUCTION_COEFFICIENT\r\n\r\n    self.rate = _rate\r\n\r\n    log UpdateMiningParameters(block.timestamp, _rate, _start_epoch_supply)\r\n\r\n\r\n@external\r\ndef update_mining_parameters():\r\n    \"\"\"\r\n    @notice Update mining rate and supply at the start of the epoch\r\n    @dev Callable by any address, but only once per epoch\r\n         Total supply becomes slightly larger if this function is called late\r\n    \"\"\"\r\n    assert block.timestamp >= self.start_epoch_time + RATE_REDUCTION_TIME  # dev: too soon!\r\n    self._update_mining_parameters()\r\n\r\n\r\n@external\r\ndef start_epoch_time_write() -> uint256:\r\n    \"\"\"\r\n    @notice Get timestamp of the current mining epoch start\r\n            while simultaneously updating mining parameters\r\n    @return Timestamp of the epoch\r\n    \"\"\"\r\n    _start_epoch_time: uint256 = self.start_epoch_time\r\n    if block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME:\r\n        self._update_mining_parameters()\r\n        return self.start_epoch_time\r\n    else:\r\n        return _start_epoch_time\r\n\r\n\r\n@external\r\ndef future_epoch_time_write() -> uint256:\r\n    \"\"\"\r\n    @notice Get timestamp of the next mining epoch start\r\n            while simultaneously updating mining parameters\r\n    @return Timestamp of the next epoch\r\n    \"\"\"\r\n    _start_epoch_time: uint256 = self.start_epoch_time\r\n    if block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME:\r\n        self._update_mining_parameters()\r\n        return self.start_epoch_time + RATE_REDUCTION_TIME\r\n    else:\r\n        return _start_epoch_time + RATE_REDUCTION_TIME\r\n\r\n\r\n@internal\r\n@view\r\ndef _available_supply() -> uint256:\r\n    return self.start_epoch_supply + (block.timestamp - self.start_epoch_time) * self.rate\r\n\r\n\r\n@external\r\n@view\r\ndef available_supply() -> uint256:\r\n    \"\"\"\r\n    @notice Current number of tokens in existence (claimed or unclaimed)\r\n    \"\"\"\r\n    return self._available_supply()\r\n\r\n\r\n@external\r\n@view\r\ndef mintable_in_timeframe(start: uint256, end: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice How much supply is mintable from start timestamp till end timestamp\r\n    @param start Start of the time interval (timestamp)\r\n    @param end End of the time interval (timestamp)\r\n    @return Tokens mintable from `start` till `end`\r\n    \"\"\"\r\n    assert start <= end  # dev: start > end\r\n    to_mint: uint256 = 0\r\n    current_epoch_time: uint256 = self.start_epoch_time\r\n    current_rate: uint256 = self.rate\r\n\r\n    # Special case if end is in future (not yet minted) epoch\r\n    if end > current_epoch_time + RATE_REDUCTION_TIME:\r\n        current_epoch_time += RATE_REDUCTION_TIME\r\n        current_rate = current_rate * RATE_DENOMINATOR / RATE_REDUCTION_COEFFICIENT\r\n\r\n    assert end <= current_epoch_time + RATE_REDUCTION_TIME  # dev: too far in future\r\n\r\n    for i in range(999):  # Curve will not work in 1000 years. Darn!\r\n        if end >= current_epoch_time:\r\n            current_end: uint256 = end\r\n            if current_end > current_epoch_time + RATE_REDUCTION_TIME:\r\n                current_end = current_epoch_time + RATE_REDUCTION_TIME\r\n\r\n            current_start: uint256 = start\r\n            if current_start >= current_epoch_time + RATE_REDUCTION_TIME:\r\n                break  # We should never get here but what if...\r\n            elif current_start < current_epoch_time:\r\n                current_start = current_epoch_time\r\n\r\n            to_mint += current_rate * (current_end - current_start)\r\n\r\n            if start >= current_epoch_time:\r\n                break\r\n\r\n        current_epoch_time -= RATE_REDUCTION_TIME\r\n        current_rate = current_rate * RATE_REDUCTION_COEFFICIENT / RATE_DENOMINATOR  # double-division with rounding made rate a bit less => good\r\n        assert current_rate <= INITIAL_RATE  # This should never happen\r\n\r\n    return to_mint\r\n\r\n\r\n@external\r\ndef set_minter(_minter: address):\r\n    \"\"\"\r\n    @notice Set the minter address\r\n    @dev Only callable once, when minter has not yet been set\r\n    @param _minter Address of the minter\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    assert self.minter == ZERO_ADDRESS  # dev: can set the minter only once, at creation\r\n    self.minter = _minter\r\n    log SetMinter(_minter)\r\n\r\n\r\n@external\r\ndef set_admin(_admin: address):\r\n    \"\"\"\r\n    @notice Set the new admin.\r\n    @dev After all is set up, admin only can change the token name\r\n    @param _admin New admin address\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    self.admin = _admin\r\n    log SetAdmin(_admin)\r\n\r\n\r\n@external\r\n@view\r\ndef totalSupply() -> uint256:\r\n    \"\"\"\r\n    @notice Total number of tokens in existence.\r\n    \"\"\"\r\n    return self.total_supply\r\n\r\n\r\n@external\r\n@view\r\ndef allowance(_owner : address, _spender : address) -> uint256:\r\n    \"\"\"\r\n    @notice Check the amount of tokens that an owner allowed to a spender\r\n    @param _owner The address which owns the funds\r\n    @param _spender The address which will spend the funds\r\n    @return uint256 specifying the amount of tokens still available for the spender\r\n    \"\"\"\r\n    return self.allowances[_owner][_spender]\r\n\r\n\r\n@external\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer `_value` tokens from `msg.sender` to `_to`\r\n    @dev Vyper does not allow underflows, so the subtraction in\r\n         this function will revert on an insufficient balance\r\n    @param _to The address to transfer to\r\n    @param _value The amount to be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    assert _to != ZERO_ADDRESS  # dev: transfers to 0x0 are not allowed\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @notice Transfer `_value` tokens from `_from` to `_to`\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n     @return bool success\r\n    \"\"\"\r\n    assert _to != ZERO_ADDRESS  # dev: transfers to 0x0 are not allowed\r\n    # NOTE: vyper does not allow underflows\r\n    #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    self.allowances[_from][msg.sender] -= _value\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve `_spender` to transfer `_value` tokens on behalf of `msg.sender`\r\n    @dev Approval may only be from zero -> nonzero or from nonzero -> zero in order\r\n        to mitigate the potential race condition described here:\r\n        https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will spend the funds\r\n    @param _value The amount of tokens to be spent\r\n    @return bool success\r\n    \"\"\"\r\n    assert _value == 0 or self.allowances[msg.sender][_spender] == 0\r\n    self.allowances[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef mint(_to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Mint `_value` tokens and assign them to `_to`\r\n    @dev Emits a Transfer event originating from 0x00\r\n    @param _to The account that will receive the created tokens\r\n    @param _value The amount that will be created\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.minter  # dev: minter only\r\n    assert _to != ZERO_ADDRESS  # dev: zero address\r\n\r\n    if block.timestamp >= self.start_epoch_time + RATE_REDUCTION_TIME:\r\n        self._update_mining_parameters()\r\n\r\n    _total_supply: uint256 = self.total_supply + _value\r\n    assert _total_supply <= self._available_supply()  # dev: exceeds allowable mint amount\r\n    self.total_supply = _total_supply\r\n\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(ZERO_ADDRESS, _to, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef burn(_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Burn `_value` tokens belonging to `msg.sender`\r\n    @dev Emits a Transfer event with a destination of 0x00\r\n    @param _value The amount that will be burned\r\n    @return bool success\r\n    \"\"\"\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.total_supply -= _value\r\n\r\n    log Transfer(msg.sender, ZERO_ADDRESS, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef set_name(_name: String[64], _symbol: String[32]):\r\n    \"\"\"\r\n    @notice Change the token name and symbol to `_name` and `_symbol`\r\n    @dev Only callable by the admin account\r\n    @param _name New token name\r\n    @param _symbol New token symbol\r\n    \"\"\"\r\n    assert msg.sender == self.admin, \"Only admin is allowed to change name\"\r\n    self.name = _name\r\n    self.symbol = _symbol",
  "sourcePath": "C:/Users/vishn/OneDrive/Desktop/TempRoyakle/rlp/contracts/curve/CRVToken.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.2.8+commit.069936f"
  },
  "networks": {},
  "schemaVersion": "3.3.2",
  "updatedAt": "2020-12-22T10:05:55.833Z"
}